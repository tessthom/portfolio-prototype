/* Custom variables */
:root {
  --sqrt2: 1.41421356; /* for use in calc() when adjusting hamburger menu button after it transforms into 'X' shape */
  --menu-btn-width: 3rem;
}

/* Box sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
  padding: 0;
}

/* Remove default margins */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Smooth scroll behavior for root */
html:focus-within {
  scroll-behavior: smooth;
}

/* Image resets */
img,
picture {
  max-width: 100%;
  display: block;
}

/* List reset */
ul {
  list-style: none;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove animations, transitions, and smooth scroll for users with reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* DEV VISUAL AID - DELETE WHEN LAYOUT COMPLETE */
section,
article {
  border: 1px solid red;
}

/* General */
body {
  min-height: 100vh;
  background-color: var(--sand-0);
  color: var(--blue-11);
  /* font-family: Inter, Helvetica, sans-serif; */
  font-family: var(--font-sans);
  width: min(100% - 2rem, 50rem); /* 1rem margin @ left and right on smaller screens */
  margin-inline: auto; /* horizontally center body based on above */
}

h1,
h2,
h3,
h4,
h5,
h6,
.logo {
  /* font-family: 'Cormorant Garamond', 'Times New Roman', Times, serif; */
  font-family: var(--font-serif);
  font-weight: var(--font-weight-5);
  letter-spacing: var(--font-letterspacing-0);
}

/* Utility Classes */
/* TODO: Add helpful classes to add to HTML like `.grid-col-span-2 { span 2; }` */
.grid {
  display: grid;
  place-content: center;
}

.flex {
  display: flex;
  gap: var(--size-3);
}

/* Components */
/* Navbar */
.nav-bar {
  /* border: 1px solid red; */
  background-color: var(--sand-0);
  position: relative; /* create positioning context for the dropdown nav-list */
}

.logo-wrapper {
  margin-right: auto; /* easy sub instead of setting justify-content: space-between on the nav-bar flex container */
  align-items: center;
}

.logo {
  font-size: var(--font-size-5);
  /* height: 100%;
  display: flex;
  align-items: center; */
  line-height: var(--font-lineheight-00);
  padding-top: .17em; /* TODO: FIGURE OUT HOW TO COMBAT FONT-BASED VERTICAL CENTERING ISSUES WHEN THE FONT'S ASCENDERS SCREW UP HOW THE TEXT'S CONTENT-AREA SITS IN THE VIRTUAL (i.e., LINE-HEIGHT) AREA. May be impossible w/ current CSS? */
}

.logo,
.nav-link {
  /* border: 1px dotted red; */
  text-decoration: none;
  color: var(--blue-11);
}

/* Hamburger menu */
.menu-button {
  background: none;
  border: 1px solid deeppink;
  position: relative;
  width: var(--menu-btn-width);
  height: var(--menu-btn-width);
  margin-right: var(--size-3); /* GET RID OF THIS AND JUST PUT MARGIN AROUND ALL CONTENT? */
  transition: transform 0.3s ease-in-out;
}

.line {
  background: var(--blue-11);
  height: 2px;
  border-radius: var(--radius-1);
  width: 100%;
  position: absolute;
  transition: transform 0.3s ease, top 0.3s ease, bottom 0.3s ease;
}

.line:first-child {
  top: 40%;
}

.line:last-child {
  bottom: 40%;
}

/* Shift the menu button rightward to maintain vertical alignment with the list items below it by subtracting the width of the button from the result of the square's diagonal measurement. At 3rem the calculated width is 0.62rem, for example. */
.menu-button[aria-expanded="true"] {
  transform: translateX(calc((var(--menu-btn-width) * var(--sqrt2) - var(--menu-btn-width))/ 2));
}

.menu-button[aria-expanded="true"] .line:first-child {
  transform: rotate(45deg);
  top: calc(50% - 1px);
}

.menu-button[aria-expanded="true"] .line:last-child {
  transform: rotate(-45deg);
  bottom: calc(50% - 1px);
}

.nav-list {
  /* border: 1px dashed green; */
  background-color: var(--sand-0);
  margin: 0;
  padding: var(--size-8) var(--size-3);
  position: absolute;
  top: 100%;
  right: 0;
  width: 100%;
  text-align: end;
  transform: scale(1, 0);
  transform-origin: top;
  transition: transform 400ms ease-in-out;
}

.nav-list.show {
  transform: scale(1, 1);
}

.nav-item {
  width: 100%;
  font-size: var(--font-size-3);
  margin-bottom: var(--size-8);
  opacity: 0;
}

.nav-list.show .nav-item {
  opacity: 1;
  transition: opacity 200ms ease-in-out 250ms;
}

.nav-item:last-of-type {
  margin-bottom: 0;
}

/* Footer */
/* Hide form labels so still readable for Accessibility */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
/* EXPLANATION OF ABOVE CSS:
position: absolute; - This takes the element out of the normal document flow, so it won't take up any space on the screen or push other elements around.

width: 1px; height: 1px; - Sets the size too small to see.

padding: 0; - Removes any padding around the element, which could increase its size.

margin: -1px; - Pulls the element 1 pixel outside of its container, ensuring it's not visible even if the container has border or padding.

overflow: hidden; - Prevents any content that extends beyond the 1 pixel by 1 pixel size from being visible.

clip: rect(0,0,0,0); - Old method of clipping an element to a specific rectangle, in this case a 0 by 0 rectangle, effectively hiding it. For backwards compatibility.
*/

.footer-fine-print {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* Page-specific Styles */

/* Home */
.home.grid {
  gap: var(--size-5);
  grid-auto-columns: 1fr;
  grid-template-areas:
    'intro'
    'projects'
    'accordion'
    'cta';
}

/* Home - Intro */
.intro {
  grid-area: intro;
}

.headshot {
  width: 50vw;
  border-radius: 50%;
}

/* Home - Projects Section */
.projects {
  grid-area: projects;
}

/* Home - Accordion Section */
.accordion {
  grid-area: accordion;
}

/* Home - CTA Section */
.cta {
  grid-area: cta;
}

/* Tablet+ Styles */
@media (min-width: 768px) {
  /* Change Navbar */
  #menu-button {
    display: none; /* hide hamburger button */
  }

  .nav-list {
    display: flex; /* display nav list as flex row */
    gap: var(--size-3);
    align-items: center;
  }
}

/* TODO: 
   - Make headshot less wide on larger screens if still using vw on mobile
   - Sort out contact pseudo-form. No backend for Midterm. Create actual form for final? 
   - 
   */

/* PROPERTIES TO REMEMBER TO LEVERAGE IF APPROPRIATE: 
 place-content: center; // shorthand for align-content | justify-content, used in flexbox & grid. Can spec just 1 value to appy to both align-content and justify-content.

 // This is a great way to give your main content area a "margin" on smaller screen sizes (`100% - 2rem` means 1rem on each side), and a max-width of 50rem or whatever on larger screens. `margin-inline: auto` is a shorthand way of saying `margin-left: auto; margin-right: auto;`.
 .content-container {
  width: min(100% - 2rem, 50rem [or 800px]);
  margin-inline: auto;
 }

 // Change OP to custom properties, and have them be dependent on user's dark or light mode preference 
 :root {
  --brand: var(--blue-10)
 }

 @media (prefers-color-scheme: dark) {
  :root {
    --brand: var(--[whatever-cream-color]);
  }
}

*/

/* :root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
  background-color: var(--blue-4);
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.vanilla:hover {
  filter: drop-shadow(0 0 2em #f7df1eaa);
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
} */
